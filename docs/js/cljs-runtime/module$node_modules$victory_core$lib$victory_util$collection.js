shadow$provide.module$node_modules$victory_core$lib$victory_util$collection=function(global,process,require,module,exports,shadow$shims){function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}return Array.from(arr)}Object.defineProperty(exports,"__esModule",{value:!0});var _isEqual3=(global=require("module$node_modules$lodash$isEqual"))&&global.__esModule?global:{default:global};exports.default={isNonEmptyArray:function(collection){return Array.isArray(collection)&&
0<collection.length},containsStrings:function(collection){return Array.isArray(collection)&&collection.some(function(value){return"string"===typeof value})},containsDates:function(collection){return Array.isArray(collection)&&collection.some(function(value){return value instanceof Date})},containsNumbers:function(collection){return Array.isArray(collection)&&collection.some(function(value){return"number"===typeof value})},containsOnlyStrings:function(collection){return this.isNonEmptyArray(collection)&&
collection.every(function(value){return"string"===typeof value})},isArrayOfArrays:function(collection){return this.isNonEmptyArray(collection)&&collection.every(Array.isArray)},removeUndefined:function(arr){return arr.filter(function(el){return void 0!==el})},getMaxValue:function(arr){for(var _len=arguments.length,values=Array(1<_len?_len-1:0),_key=1;_key<_len;_key++)values[_key-1]=arguments[_key];_len=arr.concat(values);return this.containsDates(_len)?new Date(Math.max.apply(Math,_toConsumableArray(_len))):
Math.max.apply(Math,_toConsumableArray(_len))},getMinValue:function(arr){for(var _len2=arguments.length,values=Array(1<_len2?_len2-1:0),_key2=1;_key2<_len2;_key2++)values[_key2-1]=arguments[_key2];_len2=arr.concat(values);return this.containsDates(_len2)?new Date(Math.min.apply(Math,_toConsumableArray(_len2))):Math.min.apply(Math,_toConsumableArray(_len2))},splitArray:function(array,delimiterFn){var segmentStartIndex=0;return array.reduce(function(memo,item,index){delimiterFn(item)?(memo=memo.concat([array.slice(segmentStartIndex,
index)]),segmentStartIndex=index+1):index===array.length-1&&(memo=memo.concat([array.slice(segmentStartIndex,array.length)]));return memo},[]).filter(function(segment){return Array.isArray(segment)&&0<segment.length})},allSetsEqual:function(itemSets){return itemSets.every(function(comparisonSet){return(0,_isEqual3.default)(comparisonSet[0],comparisonSet[1])})}}}
//# sourceMappingURL=module$node_modules$victory_core$lib$victory_util$collection.js.map
