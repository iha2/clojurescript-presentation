{
"version":3,
"file":"module$node_modules$prismjs$components$prism_swift.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,mDAAA,CAAuE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAEpIC,KAAAC,UAAAC,MAAA,CAAwBF,KAAAC,UAAAE,OAAA,CAAuB,OAAvB,CAAgC,CACvD,OAAU,CACTC,QAAS,sEADA,CAETC,OAAQ,CAAA,CAFC,CAGTC,OAAQ,CACP,cAAiB,CAChBF,QAAS,4BADO,CAEhBE,OAAQ,CACPC,UAAW,CACVH,QAAS,WADC,CAEVI,MAAO,UAFG,CADJ,CAFQ,CADV,CAHC,CAD6C,CAiBvD,QAAW,6hBAjB4C;AAkBvD,OAAU,2EAlB6C,CAmBvD,SAAY,uCAnB2C,CAoBvD,OAAU,8IApB6C,CAqBvD,QAAW,iiBArB4C,CAAhC,CAuBxBR;KAAAC,UAAAC,MAAA,OAAAI,OAAA,cAAAA,OAAAG,KAAA,CAAsET,KAAAU,KAAAC,MAAA,CAAiBX,KAAAC,UAAAC,MAAjB,CAzB8D;",
"sources":["node_modules/prismjs/components/prism-swift.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$prismjs$components$prism_swift\"] = function(global,process,require,module,exports,shadow$shims) {\n// issues: nested multiline comments\nPrism.languages.swift = Prism.languages.extend('clike', {\n\t'string': {\n\t\tpattern: /(\"|')(\\\\(?:\\((?:[^()]|\\([^)]+\\))+\\)|\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /\\\\\\((?:[^()]|\\([^)]+\\))+\\)/,\n\t\t\t\tinside: {\n\t\t\t\t\tdelimiter: {\n\t\t\t\t\t\tpattern: /^\\\\\\(|\\)$/,\n\t\t\t\t\t\talias: 'variable'\n\t\t\t\t\t}\n\t\t\t\t\t// See rest below\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t'keyword': /\\b(as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|Protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\b/,\n\t'number': /\\b([\\d_]+(\\.[\\de_]+)?|0x[a-f0-9_]+(\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n\t'constant': /\\b(nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n\t'atrule': /@\\b(IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\b/,\n\t'builtin': /\\b([A-Z]\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\b/\n});\nPrism.languages.swift['string'].inside['interpolation'].inside.rest = Prism.util.clone(Prism.languages.swift);\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Prism","languages","swift","extend","pattern","greedy","inside","delimiter","alias","rest","util","clone"]
}
