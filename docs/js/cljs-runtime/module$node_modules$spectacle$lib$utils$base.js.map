{
"version":3,
"file":"module$node_modules$spectacle$lib$utils$base.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/spectacle/lib/utils/base.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$spectacle$lib$utils$base\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStyles = void 0;\n\n/*eslint max-statements:0,complexity:0,no-invalid-this:0*/\nvar parseFontSize = function parseFontSize(fontSize) {\n  var sizeComponents = fontSize.match(/\\d*\\.*\\d+|\\D+/g);\n  var size = parseFloat(sizeComponents[0]);\n  var unit = sizeComponents[1];\n  return {\n    size: size,\n    unit: unit\n  };\n};\n\nvar getFontSizeFromElement = function getFontSizeFromElement(element) {\n  var fontSize = window.getComputedStyle ? window.getComputedStyle(element).getPropertyValue('font-size') : element.currentStyle.fontSize;\n  return fontSize ? parseFontSize(fontSize) : null;\n};\n\nvar convertFontSizeToPx = function convertFontSizeToPx(fontSize) {\n  var convertedFontSize;\n\n  if (typeof fontSize === 'number') {\n    convertedFontSize = fontSize;\n  } else if (typeof fontSize === 'string') {\n    var parsedFont = parseFontSize(fontSize);\n    var bodyFont = getFontSizeFromElement(document.body);\n    var htmlFont = getFontSizeFromElement(document.documentElement);\n\n    switch (parsedFont.unit) {\n      case 'px':\n        convertedFontSize = parsedFont.size;\n        break;\n\n      case 'pt':\n        convertedFontSize = parsedFont.size * 96 / 72;\n        break;\n\n      case '%':\n        if (bodyFont) {\n          convertedFontSize = bodyFont.size * parsedFont.size / 100;\n        }\n\n        break;\n\n      case 'em':\n        if (bodyFont) {\n          convertedFontSize = bodyFont.size * parsedFont.size;\n        }\n\n        break;\n\n      case 'rem':\n        if (htmlFont) {\n          convertedFontSize = htmlFont.size * parsedFont.size;\n        }\n\n        break;\n\n      default:\n        convertedFontSize = parsedFont.size;\n    }\n  }\n\n  return convertedFontSize;\n};\n\nvar getStyles = function getStyles() {\n  if (process.env.NODE_ENV !== 'production' && typeof this.warnedAboutFontSize === 'undefined') {\n    this.warnedAboutFontSize = false;\n  }\n\n  var _this$props = this.props,\n      italic = _this$props.italic,\n      bold = _this$props.bold,\n      caps = _this$props.caps,\n      margin = _this$props.margin,\n      padding = _this$props.padding,\n      textColor = _this$props.textColor,\n      textFont = _this$props.textFont,\n      textSize = _this$props.textSize,\n      textAlign = _this$props.textAlign,\n      bgColor = _this$props.bgColor,\n      bgImage = _this$props.bgImage,\n      bgDarken = _this$props.bgDarken,\n      bgSize = _this$props.bgSize,\n      bgPosition = _this$props.bgPosition,\n      bgRepeat = _this$props.bgRepeat,\n      overflow = _this$props.overflow,\n      height = _this$props.height;\n  var styles = {};\n  var recommendedMinFontSizePx = 24;\n\n  if (typeof italic === 'boolean') {\n    styles.fontStyle = italic ? 'italic' : 'normal';\n  }\n\n  if (typeof bold === 'boolean') {\n    styles.fontWeight = bold ? 'bold' : 'normal';\n  }\n\n  if (typeof caps === 'boolean') {\n    styles.textTransform = caps ? 'uppercase' : 'none';\n  }\n\n  if (margin) {\n    styles.margin = margin;\n  }\n\n  if (padding) {\n    styles.padding = padding;\n  }\n\n  if (textColor) {\n    var color = '';\n\n    if (!this.context.styles.colors.hasOwnProperty(textColor)) {\n      color = textColor;\n    } else {\n      color = this.context.styles.colors[textColor];\n    }\n\n    styles.color = color;\n  }\n\n  if (textFont) {\n    var font = '';\n\n    if (!this.context.styles.fonts.hasOwnProperty(textFont)) {\n      font = textFont;\n    } else {\n      font = this.context.styles.fonts[textFont];\n    }\n\n    styles.fontFamily = font;\n  }\n\n  if (textSize) {\n    styles.fontSize = textSize;\n\n    if (process.env.NODE_ENV !== 'production' && !this.warnedAboutFontSize && this.context.store.getState().style.globalStyleSet) {\n      var fontSize = convertFontSizeToPx(textSize) || recommendedMinFontSizePx;\n\n      if (fontSize < recommendedMinFontSizePx) {\n        // eslint-disable-next-line\n        console.warn(\"prop `textSize=\\\"\".concat(textSize, \"\\\"` is below the recommended minimum of \").concat(recommendedMinFontSizePx, \"px\"));\n        this.warnedAboutFontSize = true;\n      }\n    }\n  }\n\n  if (textAlign) {\n    styles.textAlign = textAlign;\n  }\n\n  if (bgColor) {\n    var _color = '';\n\n    if (!this.context.styles.colors.hasOwnProperty(bgColor)) {\n      _color = bgColor;\n    } else {\n      _color = this.context.styles.colors[bgColor];\n    }\n\n    styles.backgroundColor = _color;\n  }\n\n  if (bgImage) {\n    if (bgDarken) {\n      styles.backgroundImage = \"linear-gradient( rgba(0, 0, 0, \".concat(bgDarken, \"), rgba(0, 0, 0, \").concat(bgDarken, \") ), url(\").concat(bgImage, \")\");\n    } else {\n      styles.backgroundImage = \"url(\".concat(bgImage, \")\");\n    }\n\n    styles.backgroundSize = bgSize || 'cover';\n    styles.backgroundPosition = bgPosition || 'center center';\n\n    if (bgRepeat) {\n      styles.backgroundRepeat = bgRepeat;\n    }\n  }\n\n  if (overflow) {\n    styles.overflow = overflow;\n  }\n\n  if (height) {\n    styles.height = height;\n  }\n\n  return styles;\n};\n\nexports.getStyles = getStyles;\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Object","defineProperty","value","getStyles","parseFontSize","fontSize","sizeComponents","match","size","parseFloat","unit","getFontSizeFromElement","element","window","getComputedStyle","getPropertyValue","currentStyle","warnedAboutFontSize","_this$props","props","italic","bold","caps","margin","padding","textColor","textFont","textSize","textAlign","bgColor","bgImage","bgDarken","bgSize","bgPosition","bgRepeat","overflow","height","styles","fontStyle","fontWeight","textTransform","color","context","colors","hasOwnProperty","font","fonts","fontFamily","store","getState","style","globalStyleSet","convertedFontSize","parsedFont","bodyFont","document","body","htmlFont","documentElement","recommendedMinFontSizePx","console","warn","concat","_color","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat"]
}
