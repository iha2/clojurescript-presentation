{
"version":3,
"file":"module$node_modules$prismjs$components$prism_ruby.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAoHjIC,MAAAA,CAAAA,KA5GDA,OAAAC,UAAAC,KAAA,CAAuBF,MAAAC,UAAAE,OAAA,CAAuB,OAAvB,CAAgC,CACtD,QAAW,sBAD2C,CAEtD,QAAW,2PAF2C,CAAhC,CAKnBC,QAAAA,CAAgB,CACnBC,QAAS,YADU;AAEnBC,OAAQ,CACP,UAAa,CACZD,QAAS,UADG,CAEZE,MAAO,KAFK,CADN,CAKPC,KAAMR,MAAAS,KAAAC,MAAA,CAAiBV,MAAAC,UAAAC,KAAjB,CALC,CAFW,CAWpBF,OAAAC,UAAAU,aAAA,CAA6B,MAA7B,CAAqC,SAArC,CAAgD,CAC/C,MAAS,CACR,CACCN,QAAS,2DADV,CAECC,OAAQ,CACP,cAAiBF,OADV,CAFT,CADQ,CAOR,CACCC,QAAS,uCADV,CAECC,OAAQ,CACP,cAAiBF,OADV,CAFT,CAPQ,CAaR,CAECC,QAAS,wDAFV,CAGCC,OAAQ,CACP,cAAiBF,OADV,CAHT,CAbQ,CAoBR,CACCC,QAAS,yCADV,CAECC,OAAQ,CACP,cAAiBF,OADV,CAFT,CApBQ;AA0BR,CACCC,QAAS,qCADV,CAECC,OAAQ,CACP,cAAiBF,OADV,CAFT,CA1BQ,CAgCR,CACCC,QAAS,0EADV,CAECO,WAAY,CAAA,CAFb,CAhCQ,CADsC,CAsC/C,SAAY,wCAtCmC,CAuC/C,OAAU,oCAvCqC,CAAhD,CA0CAZ,OAAAC,UAAAU,aAAA,CAA6B,MAA7B,CAAqC,QAArC,CAA+C,CAC9C,QAAW,iPADmC;AAE9C,SAAY,iCAFkC,CAA/C,CAKAX,OAAAC,UAAAC,KAAAW,OAAA,CAA8B,CAC7B,CACCR,QAAS,2DADV,CAECS,OAAQ,CAAA,CAFT,CAGCR,OAAQ,CACP,cAAiBF,OADV,CAHT,CAD6B,CAQ7B,CACCC,QAAS,uCADV,CAECS,OAAQ,CAAA,CAFT,CAGCR,OAAQ,CACP,cAAiBF,OADV,CAHT,CAR6B,CAe7B,CAECC,QAAS,wDAFV,CAGCS,OAAQ,CAAA,CAHT,CAICR,OAAQ,CACP,cAAiBF,OADV,CAJT,CAf6B,CAuB7B,CACCC,QAAS,yCADV,CAECS,OAAQ,CAAA,CAFT,CAGCR,OAAQ,CACP,cAAiBF,OADV,CAHT,CAvB6B,CA8B7B,CACCC,QAAS,qCADV;AAECS,OAAQ,CAAA,CAFT,CAGCR,OAAQ,CACP,cAAiBF,OADV,CAHT,CA9B6B,CAqC7B,CACCC,QAAS,2CADV,CAECS,OAAQ,CAAA,CAFT,CAGCR,OAAQ,CACP,cAAiBF,OADV,CAHT,CArC6B,CAvEoG;",
"sources":["node_modules/prismjs/components/prism-ruby.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$prismjs$components$prism_ruby\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Original by Samuel Flores\n *\n * Adds the following new token classes:\n * \t\tconstant, builtin, variable, symbol, regex\n */\n(function(Prism) {\n\tPrism.languages.ruby = Prism.languages.extend('clike', {\n\t\t'comment': /#(?!\\{[^\\r\\n]*?\\}).*/,\n\t\t'keyword': /\\b(alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n\t});\n\n\tvar interpolation = {\n\t\tpattern: /#\\{[^}]+\\}/,\n\t\tinside: {\n\t\t\t'delimiter': {\n\t\t\t\tpattern: /^#\\{|\\}$/,\n\t\t\t\talias: 'tag'\n\t\t\t},\n\t\t\trest: Prism.util.clone(Prism.languages.ruby)\n\t\t}\n\t};\n\n\tPrism.languages.insertBefore('ruby', 'keyword', {\n\t\t'regex': [\n\t\t\t{\n\t\t\t\tpattern: /%r([^a-zA-Z0-9\\s\\{\\(\\[<])(?:[^\\\\]|\\\\[\\s\\S])*?\\1[gim]{0,3}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t// Here we need to specifically allow interpolation\n\t\t\t\tpattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n\t\t\t\tlookbehind: true\n\t\t\t}\n\t\t],\n\t\t'variable': /[@$]+[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\\b)/,\n\t\t'symbol': /:[a-zA-Z_][a-zA-Z_0-9]*(?:[?!]|\\b)/\n\t});\n\n\tPrism.languages.insertBefore('ruby', 'number', {\n\t\t'builtin': /\\b(Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|File|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n\t\t'constant': /\\b[A-Z][a-zA-Z_0-9]*(?:[?!]|\\b)/\n\t});\n\n\tPrism.languages.ruby.string = [\n\t\t{\n\t\t\tpattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s\\{\\(\\[<])(?:[^\\\\]|\\\\[\\s\\S])*?\\1/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t// Here we need to specifically allow interpolation\n\t\t\tpattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /(\"|')(#\\{[^}]+\\}|\\\\(?:\\r?\\n|\\r)|\\\\?.)*?\\1/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t}\n\t];\n}(Prism));\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Prism","languages","ruby","extend","interpolation","pattern","inside","alias","rest","util","clone","insertBefore","lookbehind","string","greedy"]
}
