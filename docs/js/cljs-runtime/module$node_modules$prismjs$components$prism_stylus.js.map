{
"version":3,
"file":"module$node_modules$prismjs$components$prism_stylus.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,oDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAsGnIC,MAAAA,CAAAA,KApGGC,QAAAA,CAAS,CACZ,IAAO,sBADK,CAEZ,OAAU,0CAFE,CAGZ,cAAiB,IAHL,CAIZ,KAAQ,IAJI,CAKZ,UAAa,8BALD,CAMZ,QAAW,CACVC,QAAS,2DADC,CAEVC,WAAY,CAAA,CAFF,CANC,CAUZ,QAAW,gBAVC,CAWZ,OAAU,mBAXE,CAYZ,UAAW,oBAZC,CAaZ,SAAY,CAGX,kGAHW,CAbA;AAkBZ,YAAe,eAlBH,CAqBbF,QAAA,cAAA,CAA0B,CACzBC,QAAS,gBADgB,CAEzBE,MAAO,UAFkB,CAGzBH,OAAQD,MAAAK,KAAAC,MAAA,CAAiBL,OAAjB,CAHiB,CAK1BA,QAAA,KAAA,CAAiB,CAChBC,QAAS,mBADO,CAEhBD,OAAQ,CACP,WAAY,QADL,CAEPM,KAAMP,MAAAK,KAAAC,MAAA,CAAiBL,OAAjB,CAFC,CAFQ,CAQjBD,OAAAQ,UAAAC,OAAA,CAAyB,CACxB,QAAW,CACVP,QAAS,oCADC,CAEVC,WAAY,CAAA,CAFF,CADa,CAKxB,qBAAsB,CACrBD,QAAS,YADY,CAErBC,WAAY,CAAA,CAFS,CAGrBF,OAAQ,CACP,OAAU,UADH,CAEPM,KAAMN,OAFC,CAHa,CALE,CAaxB,uBAAwB,CACvBC,QAAS,qDADc;AAEvBC,WAAY,CAAA,CAFW,CAGvBF,OAAQ,CACP,SAAY,MADL,CAEPM,KAAMN,OAFC,CAHe,CAbA,CAsBxB,UAAa,CACZC,QAAS,iDADG,CAEZC,WAAY,CAAA,CAFA,CAGZF,OAAQ,CACPS,QAAS,MADF,CAEPH,KAAMN,OAFC,CAHI,CAtBW,CAiCxB,uBAAwB,CACvBC,QAAS,yHADc,CAEvBC,WAAY,CAAA,CAFW,CAGvBF,OAAQ,CACP,SAAY,CACXC,QAAS,UADE,CAEXD,OAAQ,CACP,cAAiBA,OAAAU,cADV,CAFG,CADL,CAOPJ,KAAMN,OAPC,CAHe,CAjCA,CAoDxB,SAAY,CACXC,QAAS,sNADE;AAEXC,WAAY,CAAA,CAFD,CAGXF,OAAQ,CACP,cAAiBA,OAAAU,cADV,CAEP,YAAe,OAFR,CAHG,CApDY,CA6DxB,KAAQV,OAAAW,KA7DgB,CA8DxB,OAAUX,OAAAY,OA9Dc,CA+DxB,cAAiBZ,OAAAU,cA/DO,CAgExB,YAAe,eAhES,CApC2G;",
"sources":["node_modules/prismjs/components/prism-stylus.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$prismjs$components$prism_stylus\"] = function(global,process,require,module,exports,shadow$shims) {\n(function (Prism) {\n\tvar inside = {\n\t\t'url': /url\\(([\"']?).*?\\1\\)/i,\n\t\t'string': /(\"|')(?:[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*?\\1/,\n\t\t'interpolation': null, // See below\n\t\t'func': null, // See below\n\t\t'important': /\\B!(?:important|optional)\\b/i,\n\t\t'keyword': {\n\t\t\tpattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'hexcode': /#[\\da-f]{3,6}/i,\n\t\t'number': /\\b\\d+(?:\\.\\d+)?%?/,\n\t\t'boolean': /\\b(?:true|false)\\b/,\n\t\t'operator': [\n\t\t\t// We want non-word chars around \"-\" because it is\n\t\t\t// accepted in property names.\n\t\t\t/~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/\n\t\t],\n\t\t'punctuation': /[{}()\\[\\];:,]/\n\t};\n\n\tinside['interpolation'] = {\n\t\tpattern: /\\{[^\\r\\n}:]+\\}/,\n\t\talias: 'variable',\n\t\tinside: Prism.util.clone(inside)\n\t};\n\tinside['func'] = {\n\t\tpattern: /[\\w-]+\\([^)]*\\).*/,\n\t\tinside: {\n\t\t\t'function': /^[^(]+/,\n\t\t\trest: Prism.util.clone(inside)\n\t\t}\n\t};\n\n\tPrism.languages.stylus = {\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\\\\])(\\/\\*[\\w\\W]*?\\*\\/|\\/\\/.*)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'atrule-declaration': {\n\t\t\tpattern: /(^\\s*)@.+/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'atrule': /^@[\\w-]+/,\n\t\t\t\trest: inside\n\t\t\t}\n\t\t},\n\t\t'variable-declaration': {\n\t\t\tpattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'variable': /^\\S+/,\n\t\t\t\trest: inside\n\t\t\t}\n\t\t},\n\n\t\t'statement': {\n\t\t\tpattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tkeyword: /^\\S+/,\n\t\t\t\trest: inside\n\t\t\t}\n\t\t},\n\n\t\t// A property/value pair cannot end with a comma or a brace\n\t\t// It cannot have indented content unless it ended with a semicolon\n\t\t'property-declaration': {\n\t\t\tpattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'property': {\n\t\t\t\t\tpattern: /^[^\\s:]+/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'interpolation': inside.interpolation\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trest: inside\n\t\t\t}\n\t\t},\n\n\n\n\t\t// A selector can contain parentheses only as part of a pseudo-element\n\t\t// It can span multiple lines.\n\t\t// It must end with a comma or an accolade or have indented content.\n\t\t'selector': {\n\t\t\tpattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': inside.interpolation,\n\t\t\t\t'punctuation': /[{},]/\n\t\t\t}\n\t\t},\n\n\t\t'func': inside.func,\n\t\t'string': inside.string,\n\t\t'interpolation': inside.interpolation,\n\t\t'punctuation': /[{}()\\[\\];:.]/\n\t};\n}(Prism));\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Prism","inside","pattern","lookbehind","alias","util","clone","rest","languages","stylus","keyword","interpolation","func","string"]
}
