{
"version":3,
"file":"module$node_modules$prismjs$components$prism_handlebars.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CACxI,SAAQ,CAACC,KAAD,CAAQ,CAEhB,IAAIC,mBAAqB,wCAEzBD,MAAAE,UAAAC,WAAA,CAA6BH,KAAAE,UAAAE,OAAA,CAAuB,QAAvB,CAAiC,CAC7D,WAAc,CACbC,QAASJ,kBADI,CAEbK,OAAQ,CACP,UAAa,CACZD,QAAS,oBADG,CAEZE,MAAO,aAFK,CADN,CAKP,OAAU,kBALH,CAMP,OAAU,gDANH,CAOP,UAAW,kBAPJ,CAQP,MAAS,CACRF,QAAS,uCADD;AAERG,WAAY,CAAA,CAFJ,CAGRD,MAAO,SAHC,CARF,CAaP,SAAY,CACXF,QAAS,YADE,CAEXC,OAAQ,CACPG,YAAa,OADN,CAEPC,SAAU,SAFH,CAFG,CAbL,CAoBP,YAAe,mCApBR,CAqBP,SAAY,uCArBL,CAFK,CAD+C,CAAjC,CA+B7BV,MAAAE,UAAAS,aAAA,CAA6B,YAA7B,CAA2C,KAA3C,CAAkD,CACjD,qBAAsB,CACrBN,QAAS,mBADY,CAErBE,MAAO,CAAC,YAAD,CAAc,SAAd,CAFc,CAD2B,CAAlD,CASAP,MAAAY,MAAAC,IAAA,CAAgB,kBAAhB,CAAoC,QAAQ,CAACC,GAAD,CAAM,CAC5B,YAArB,GAAIA,GAAAC,SAAJ,GAIAD,GAAAE,WAGA,CAHiB,EAGjB,CADAF,GAAAG,WACA,CADiBH,GAAAI,KACjB,CAAAJ,GAAAI,KAAA,CAAWJ,GAAAI,KAAAC,QAAA,CAAiBlB,kBAAjB;AAAqC,QAAQ,CAACmB,KAAD,CAAQ,CAC/DN,GAAAE,WAAAK,KAAA,CAAoBD,KAApB,CAEA,OAAO,eAAP,CAAyBN,GAAAE,WAAAM,OAAzB,CAAiD,KAHc,CAArD,CAPX,CADiD,CAAlD,CAgBAtB,MAAAY,MAAAC,IAAA,CAAgB,eAAhB,CAAiC,QAAQ,CAACC,GAAD,CAAM,CACzB,YAArB,GAAIA,GAAAC,SAAJ,GACCD,GAAAI,KACA,CADWJ,GAAAG,WACX,CAAA,OAAOH,GAAAG,WAFR,CAD8C,CAA/C,CASAjB,MAAAY,MAAAC,IAAA,CAAgB,iBAAhB,CAAmC,QAAQ,CAACC,GAAD,CAAM,CAChD,GAAqB,YAArB,GAAIA,GAAAC,SAAJ,CAAA,CAIA,IALgD,IAKvCQ,EAAI,CALmC,CAKhCC,CAAhB,CAAmBA,CAAnB,CAAuBV,GAAAE,WAAA,CAAeO,CAAf,CAAvB,CAA0CA,CAAA,EAA1C,CAECT,GAAAW,gBAAA,CAAsBX,GAAAW,gBAAAN,QAAA,CAA4B,eAA5B,EAA+CI,CAA/C,CAAmD,CAAnD,EAAwD,KAAxD,CAA+DvB,KAAA0B,UAAA,CAAgBF,CAAhB,CAAmBV,GAAAa,QAAnB,CAAgC,YAAhC,CAAAR,QAAA,CAAsD,KAAtD,CAA6D,MAA7D,CAA/D,CAGvBL,IAAAc,QAAAC,UAAA;AAAwBf,GAAAW,gBATxB,CADgD,CAAjD,CArEgB,CAAhB,CAAA,CAkFCzB,KAlFD,CADwI;",
"sources":["node_modules/prismjs/components/prism-handlebars.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$prismjs$components$prism_handlebars\"] = function(global,process,require,module,exports,shadow$shims) {\n(function(Prism) {\n\n\tvar handlebars_pattern = /\\{\\{\\{[\\w\\W]+?\\}\\}\\}|\\{\\{[\\w\\W]+?\\}\\}/g;\n\n\tPrism.languages.handlebars = Prism.languages.extend('markup', {\n\t\t'handlebars': {\n\t\t\tpattern: handlebars_pattern,\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^\\{\\{\\{?|\\}\\}\\}?$/i,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\t'string': /([\"'])(\\\\?.)*?\\1/,\n\t\t\t\t'number': /\\b-?(0x[\\dA-Fa-f]+|\\d*\\.?\\d+([Ee][+-]?\\d+)?)\\b/,\n\t\t\t\t'boolean': /\\b(true|false)\\b/,\n\t\t\t\t'block': {\n\t\t\t\t\tpattern: /^(\\s*~?\\s*)[#\\/]\\S+?(?=\\s*~?\\s*$|\\s)/i,\n\t\t\t\t\tlookbehind: true,\n\t\t\t\t\talias: 'keyword'\n\t\t\t\t},\n\t\t\t\t'brackets': {\n\t\t\t\t\tpattern: /\\[[^\\]]+\\]/,\n\t\t\t\t\tinside: {\n\t\t\t\t\t\tpunctuation: /\\[|\\]/,\n\t\t\t\t\t\tvariable: /[\\w\\W]+/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'punctuation': /[!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n\t\t\t\t'variable': /[^!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n\t\t\t}\n\t\t}\n\t});\n\n\t// Comments are inserted at top so that they can\n\t// surround markup\n\tPrism.languages.insertBefore('handlebars', 'tag', {\n\t\t'handlebars-comment': {\n\t\t\tpattern: /\\{\\{![\\w\\W]*?\\}\\}/,\n\t\t\talias: ['handlebars','comment']\n\t\t}\n\t});\n\n\t// Tokenize all inline Handlebars expressions that are wrapped in {{ }} or {{{ }}}\n\t// This allows for easy Handlebars + markup highlighting\n\tPrism.hooks.add('before-highlight', function(env) {\n\t\tif (env.language !== 'handlebars') {\n\t\t\treturn;\n\t\t}\n\n\t\tenv.tokenStack = [];\n\n\t\tenv.backupCode = env.code;\n\t\tenv.code = env.code.replace(handlebars_pattern, function(match) {\n\t\t\tenv.tokenStack.push(match);\n\n\t\t\treturn '___HANDLEBARS' + env.tokenStack.length + '___';\n\t\t});\n\t});\n\n\t// Restore env.code for other plugins (e.g. line-numbers)\n\tPrism.hooks.add('before-insert', function(env) {\n\t\tif (env.language === 'handlebars') {\n\t\t\tenv.code = env.backupCode;\n\t\t\tdelete env.backupCode;\n\t\t}\n\t});\n\n\t// Re-insert the tokens after highlighting\n\t// and highlight them with defined grammar\n\tPrism.hooks.add('after-highlight', function(env) {\n\t\tif (env.language !== 'handlebars') {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (var i = 0, t; t = env.tokenStack[i]; i++) {\n\t\t\t// The replace prevents $$, $&, $`, $', $n, $nn from being interpreted as special patterns\n\t\t\tenv.highlightedCode = env.highlightedCode.replace('___HANDLEBARS' + (i + 1) + '___', Prism.highlight(t, env.grammar, 'handlebars').replace(/\\$/g, '$$$$'));\n\t\t}\n\n\t\tenv.element.innerHTML = env.highlightedCode;\n\t});\n\n}(Prism));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Prism","handlebars_pattern","languages","handlebars","extend","pattern","inside","alias","lookbehind","punctuation","variable","insertBefore","hooks","add","env","language","tokenStack","backupCode","code","replace","match","push","length","i","t","highlightedCode","highlight","grammar","element","innerHTML"]
}
