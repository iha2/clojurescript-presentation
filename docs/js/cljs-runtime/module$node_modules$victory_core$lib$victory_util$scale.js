shadow$provide.module$node_modules$victory_core$lib$victory_util$scale=function(global,process,require,module,exports,shadow$shims){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,"__esModule",{value:!0});global=require("module$node_modules$lodash$isFunction");var _isFunction3=_interopRequireDefault(global);global=require("module$node_modules$lodash$includes");var _includes3=_interopRequireDefault(global);global=require("module$node_modules$victory_core$lib$victory_util$helpers");
var _helpers2=_interopRequireDefault(global);global=require("module$node_modules$victory_core$lib$victory_util$collection");var _collection2=_interopRequireDefault(global),d3Scale=function(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);newObj.default=obj;return newObj}(require("module$node_modules$d3_scale$build$d3_scale")),supportedScaleStrings=["linear","time","log","sqrt"];exports.default=
{getDefaultScale:function(){return d3Scale.scaleLinear()},toNewName:function(scale){return"scale"+(scale&&scale[0].toUpperCase()+scale.slice(1))},validScale:function(scale){return"function"===typeof scale?(0,_isFunction3.default)(scale.copy)&&(0,_isFunction3.default)(scale.domain)&&(0,_isFunction3.default)(scale.range):"string"===typeof scale?(0,_includes3.default)(supportedScaleStrings,scale):!1},isScaleDefined:function(props,axis){return props.scale?props.scale.x||props.scale.y?props.scale[axis]?
!0:!1:!0:!1},getScaleTypeFromProps:function(props,axis){if(this.isScaleDefined(props,axis))return props=props.scale[axis]||props.scale,"string"===typeof props?props:this.getType(props)},getScaleFromProps:function(props,axis){if(this.isScaleDefined(props,axis)&&(props=props.scale[axis]||props.scale,this.validScale(props)))return(0,_isFunction3.default)(props)?props:d3Scale[this.toNewName(props)]()},getScaleTypeFromData:function(props,axis){if(!props.data)return"linear";axis=_helpers2.default.createAccessor(props[axis]);
props=props.data.map(axis);return _collection2.default.containsDates(props)?"time":"linear"},getBaseScale:function(props,axis){var scale=this.getScaleFromProps(props,axis);if(scale)return scale;props=this.getScaleTypeFromData(props,axis);return d3Scale[this.toNewName(props)]()},getType:function(scale){var scaleType=[{name:"log",method:"base"},{name:"ordinal",method:"unknown"},{name:"pow-sqrt",method:"exponent"},{name:"quantile",method:"quantiles"},{name:"quantize-threshold",method:"invertExtent"}].filter(function(type){return void 0!==
scale[type.method]})[0];return scaleType?scaleType.name:void 0},getScaleType:function(props,axis){return this.getScaleTypeFromProps(props,axis)||this.getScaleTypeFromData(props,axis)}}}
//# sourceMappingURL=module$node_modules$victory_core$lib$victory_util$scale.js.map
