{"version":3,"file":"cljs_workshop.core.js","sources":["cljs_workshop/core.cljs"],"mappings":"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","names":["cljs_workshop.core/app-state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs_workshop.core/theme","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$spectacle$lib$themes$default$index.default","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/clj->js","cljs_workshop.theme/colours","cljs_workshop.theme/font-families","cljs_workshop.core/start-rotation","time","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","c__5590__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__5591__auto__","switch__5358__auto__","state_7677","state_val_7678","inst_7672","cljs.core.async.impl.ioc-helpers/take!","inst_7674","inst_7675","statearr-7679","cljs.core.async.impl.ioc-helpers/return-chan","statearr-7680","state-machine__5359__auto__","ret-value__5360__auto__","result__5361__auto__","cljs.core/keyword-identical?","e7681","js/Object","ex__5362__auto__","statearr-7682","cljs.core.async.impl.ioc-helpers/process-exception","state__5592__auto__","statearr-7683","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.async/timeout","js/window","rotate-loop","cljs_workshop.core/rotatable-logo","angle","image-style","js/module$node_modules$spectacle$lib$index.Image","cljs_workshop.core/slide-1","js/module$node_modules$spectacle$lib$index.Slide","js/module$node_modules$spectacle$lib$index.Text","cljs.core/deref","cljs_workshop.core/slide-2","js/module$node_modules$spectacle$lib$index.List","js/module$node_modules$spectacle$lib$index.Appear","js/module$node_modules$spectacle$lib$index.ListItem","cljs_workshop.core/slide-3","cljs_workshop.core/slide-4","cljs_workshop.core/slide-5","cljs_workshop.core/slide-6","cljs_workshop.core/slide-7","cljs_workshop.core/slide-8","cljs_workshop.core/slide-9","cljs_workshop.core/slide-10","cljs_workshop.core/slide-11","cljs_workshop.core/slide-12","cljs_workshop.core/slide-13","cljs_workshop.core/presentation","js/module$node_modules$spectacle$lib$index.Deck","cljs_workshop.core/app","cljs_workshop.core/start","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/document","cljs_workshop.core/init"],"sourcesContent":["(ns cljs_workshop.core\n  (:require [\"spectacle\" :as spectacle :refer [Deck Slide Text Image List ListItem Appear]]\n            [reagent.core :as r :refer [adapt-react-class]]\n            [\"spectacle/lib/themes/default\" :default create-theme]\n            [cljs.core.async :refer [<! chan sliding-buffer put! close! timeout]]\n            [cljs_workshop.theme :refer [colours font-families]])\n  (:require-macros [cljs.core.async :refer [go]]))\n;; STATE\n(def app-state (r/atom 0))\n\n;; THEME\n(def theme (apply create-theme (map clj->js [colours font-families])))\n\n; (defn [] #(+ %1 %2) [1 2 2 3 23 2])\n\n;; ANIMATIONS\n(defn start-rotation []\n  (letfn [(rotate-loop [time]\n            (swap! app-state inc)\n            (go\n              (<! (timeout 30))\n              (.requestAnimationFrame js/window rotate-loop)))]\n    (.requestAnimationFrame js/window (fn [time] (rotate-loop time)))))\n\n;; COMPONENTS\n(defn rotatable-logo [angle]\n  (let [image-style\n        {:transform (str \"rotate(\" angle \"deg)\")\n         :margin \"auto\"}]\n    [:div {:style image-style}\n     [:> Image {:src \"https://raw.githubusercontent.com/cljs/logo/master/cljs-white.png\"\n                :height \"10%\"\n                :width \"10%\"}]]))\n\n\n(defn slide-1 [] \n  [:> Slide\n    [:> Text {:textColor \"white\"} \"Clojurescript for Beginners\"]\n    (rotatable-logo @app-state)])\n\n(defn slide-2\n  []\n  [:> Slide\n   [:> Text {:textColor \"white\"} \"What is Clojure?\"]\n   [:> List\n    [:> Appear [:> ListItem \"Lisp Dialect\"]]\n    [:> Appear [:> ListItem \"General Purpose\"]]\n    [:> Appear [:> ListItem \"Dynamically Typed\"]]\n    [:> Appear [:> ListItem \"Homoiconic\"]]\n    [:> Appear [:> ListItem \"Functional Programming Language\"]]]])\n\n(defn slide-3 []\n  [:> Slide\n   [:> Text {:textColor \"white\"} \"Huh?\"]\n   [:> List\n     [:> Appear [:> ListItem \"The only syntax involves curly braces\"]]\n     [:> Appear [:> ListItem \"It can be used to write any   application\"]]\n     [:> Appear [:> ListItem \"No types\"]]\n     [:> Appear [:> ListItem \"Code is data\"]]\n     [:> Appear [:> ListItem \n                 [:span \"Wants to be \"]\n                 [:span {:style {:color \"red\"}} \"Stateless!\"]]]]])\n\n(defn slide-4 []\n  [:> Slide \n   [:> Text {:textColor \"white\"} \"Eval & Apply\"]\n   [:> Appear [:img {:src \"img/evalapply.png\" :width \"95%\"}]]])\n\n(defn slide-5 []\n  [:> Slide\n   [:> Text {:textColor \"white\"} \"Eval & Apply\"]\n   [:> Appear [:img {:src \"/img/evalapplyjs.png\" :width \"85%\"}]]])\n\n(defn slide-6 []\n  [:> Slide\n   [:> Text {:textColor \"white\"} \"Eval & Apply\"]\n   [:> Appear [:img {:src \"/img/evalapplyjsdeep.png\" :width \"120%\"}]]])\n\n(defn slide-7 []\n  [:> Slide\n   [:> Text {:textColor \"white\"} \"Clojurescript S Expressions\"]\n   [:> Appear [:> Text {:textColor \"white\"}\n               [:span \"(\"]\n               [:span {:style {:color \"#a1c75e\"}} \"function \"]\n               [:span {:style {:color \"#647fbb\"}} \"arg-1 arg-2 arg-3\"]\n               [:span \"...)\"]]]])\n\n(defn slide-8 []\n  [:> Slide\n   [:> Text {:textColor \"white\"} \"Eval & Apply\"]\n   [:> Appear [:img {:src \"/img/function-def.png\" :width \"100%\"}]]])\n\n(defn slide-9 []\n  [:> Slide\n   [:> Text {:textColor \"white\"} \"Eval & Apply Expansion\"]\n   [:> Appear [:img {:src \"/img/function-expansion.png\" :width \"100%\"}]]])\n\n(defn slide-10 []\n  [:> Slide\n   [:> Text {:textColor \"white\"} \"Whats The Point?\"]\n   [:> Appear [:img {:src \"/img/compilerengine.gif\"}]]\n   [:> Appear [:> Text {:textColor \"white\"} \"You can build your own Compiler!\"]]])\n\n(defn slide-11 []\n  [:> Slide\n   [:> Text {:textColor \"white\"} \"How?....\"]\n   [:> Appear [:> Text {:textColor \"white\"} \"Macros!\"]]]\n   [:> Appear [:img {:src \"/img/simple-unless.gif\"}]])\n\n(defn slide-12 []\n  [:> Slide\n   [:Text \"Clourescript Macros\"]\n   [:> Appear [:img {:src \"for-loop-macro.png\"}]]])\n\n(defn slide-13 []\n  [:> Slide\n   [:Text \"Clourescript Macros\"]\n   [:> Appear [:img {:src \"map-macro.png\"}]]])\n\n\n\n; (defmacro unless\n;   [condition & forms]\n;   `(if (not ~condition)\n;      ~@forms))\n\n; (defmacro for\n;   \"iterate for a set period, while computing expressions with updated iterator\"\n;   [forms]\n;   (let [~interaction-expression (first ~forms)\n;         ~tail-form (rest forms)]\n;     (loop [invariant 0\n;            ~count (get-loop-max ~interaction-expression)]\n;       (if (= invariant ~count)\n;         nil\n;         (let [~iter-variables (get-variables tail-form)]\n;           (let [~reconstructed-form (construct-form ~iter-variables tail-form)]\n;             ~reconstructed-form\n;             (recur invariant (- 1 count) ~tail-form)))))))\n\n; (defmacro map\n;   \"iterate for a set period, while computing expressions with updated iterator\"\n;   [forms]\n;   (let [~interaction-expression (first ~forms)\n;         ~tail-form (rest forms)]\n;     (loop [invariant 0\n;            ~count (get-loop-max ~interaction-expression)\n;            result '()]\n;       (if (= invariant ~count)\n;         nil\n;         (let [~iter-variables (get-variables tail-form)]\n;           (let [~reconstructed-form (construct-form ~iter-variables tail-form)]\n;             result\n;             (recur invariant (- 1 count) ~tail-form (conj result ~reconstructued-form))))))))\n\n(defn presentation []\n  [:> Deck {:theme theme :transitionDuration 500}\n   (slide-1)\n   (slide-2)\n   (slide-3)\n   (slide-4)\n   (slide-5)\n   (slide-6)\n   (slide-7)\n   (slide-8)\n   (slide-9)\n   (slide-10)\n   (slide-11)])\n\n;; APP\n(defn app [] (presentation))\n\n(start-rotation)\n\n(defn start []\n  (r/render [app]\n    (.getElementById js/document \"app\")))\n\n(defn ^:export init []\n  (start))\n"]}