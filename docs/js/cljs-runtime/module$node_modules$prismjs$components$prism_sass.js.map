{
"version":3,
"file":"module$node_modules$prismjs$components$prism_sass.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAyEjIC,MAAAA,CAAAA,KAvEDA,OAAAC,UAAAC,KAAA,CAAuBF,MAAAC,UAAAE,OAAA,CAAuB,KAAvB,CAA8B,CAEpD,QAAW,CACVC,QAAS,gDADC,CAEVC,WAAY,CAAA,CAFF,CAFyC,CAA9B,CAQvBL,OAAAC,UAAAK,aAAA,CAA6B,MAA7B,CAAqC,QAArC,CAA+C,CAE9C,cAAe,CAEdF,QAAS,qBAFK,CAGdG,OAAQ,CACP,OAAU,mBADH,CAHM,CAF+B,CAA/C,CAUA,QAAOP,MAAAC,UAAAC,KAAAM,OAGHC,QAAAA,CAAW,iCACXC,QAAAA,CAAW,CACd,0CADc;AAEd,CACCN,QAAS,cADV,CAECC,WAAY,CAAA,CAFb,CAFc,CAQfL,OAAAC,UAAAK,aAAA,CAA6B,MAA7B,CAAqC,UAArC,CAAiD,CAEhD,gBAAiB,CAChBF,QAAS,cADO,CAEhBG,OAAQ,CACP,YAAe,GADR,CAEP,SAAYE,OAFL,CAGP,SAAYC,OAHL,CAFQ,CAF+B,CAWhD,gBAAiB,CAChBN,QAAS,qCADO,CAEhBG,OAAQ,CACP,SAAY,CACX,iBADW,CAEX,CACCH,QAAS,YADV,CAECC,WAAY,CAAA,CAFb,CAFW,CADL,CAQP,YAAe,GARR,CASP,SAAYI,OATL,CAUP,SAAYC,OAVL,CAWP,UAAaV,MAAAC,UAAAC,KAAAS,UAXN,CAFQ,CAX+B,CAAjD,CA4BA,QAAOX,MAAAC,UAAAC,KAAAU,SACP,QAAOZ,MAAAC,UAAAC,KAAAS,UAIP,QAAOX,MAAAC,UAAAC,KAAAW,SACPb;MAAAC,UAAAK,aAAA,CAA6B,MAA7B,CAAqC,aAArC,CAAoD,CACnD,SAAY,CACXF,QAAS,wEADE,CAEXC,WAAY,CAAA,CAFD,CADuC,CAApD,CAlEkI;",
"sources":["node_modules/prismjs/components/prism-sass.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$prismjs$components$prism_sass\"] = function(global,process,require,module,exports,shadow$shims) {\n(function(Prism) {\n\tPrism.languages.sass = Prism.languages.extend('css', {\n\t\t// Sass comments don't need to be closed, only indented\n\t\t'comment': {\n\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('sass', 'atrule', {\n\t\t// We want to consume the whole line\n\t\t'atrule-line': {\n\t\t\t// Includes support for = and + shortcuts\n\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,\n\t\t\tinside: {\n\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/m\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.atrule;\n\n\n\tvar variable = /((\\$[-_\\w]+)|(#\\{\\$[-_\\w]+\\}))/i;\n\tvar operator = [\n\t\t/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n\t\t{\n\t\t\tpattern: /(\\s+)-(?=\\s)/,\n\t\t\tlookbehind: true\n\t\t}\n\t];\n\n\tPrism.languages.insertBefore('sass', 'property', {\n\t\t// We want to consume the whole line\n\t\t'variable-line': {\n\t\t\tpattern: /^[ \\t]*\\$.+/m,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator\n\t\t\t}\n\t\t},\n\t\t// We want to consume the whole line\n\t\t'property-line': {\n\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n\t\t\tinside: {\n\t\t\t\t'property': [\n\t\t\t\t\t/[^:\\s]+(?=\\s*:)/,\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /(:)[^:\\s]+/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator,\n\t\t\t\t'important': Prism.languages.sass.important\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.property;\n\tdelete Prism.languages.sass.important;\n\n\t// Now that whole lines for other patterns are consumed,\n\t// what's left should be selectors\n\tdelete Prism.languages.sass.selector;\n\tPrism.languages.insertBefore('sass', 'punctuation', {\n\t\t'selector': {\n\t\t\tpattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n}(Prism));\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Prism","languages","sass","extend","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","important","property","selector"]
}
