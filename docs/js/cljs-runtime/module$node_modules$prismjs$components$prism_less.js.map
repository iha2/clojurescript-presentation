{
"version":3,
"file":"module$node_modules$prismjs$components$prism_less.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CASnIC,KAAAC,UAAAC,KAAA,CAAuBF,KAAAC,UAAAE,OAAA,CAAuB,KAAvB,CAA8B,CACpD,QAAW,CACV,kBADU,CAEV,CACCC,QAAS,iBADV,CAECC,WAAY,CAAA,CAFb,CAFU,CADyC,CAQpD,OAAU,CACTD,QAAS,6CADA,CAETE,OAAQ,CACP,YAAe,OADR,CAFC,CAR0C,CAepD,SAAY,CACXF,QAAS,wEADE,CAEXE,OAAQ,CAEP,SAAY,UAFL,CAFG,CAfwC,CAuBpD,SAAY,0CAvBwC;AAwBpD,YAAe,WAxBqC,CAyBpD,SAAY,UAzBwC,CAA9B,CA6BvBN,MAAAC,UAAAM,aAAA,CAA6B,MAA7B,CAAqC,aAArC,CAAoD,CACnD,WAAYP,KAAAC,UAAAC,KAAAM,SADuC,CAApD,CAIAR,MAAAC,UAAAM,aAAA,CAA6B,MAA7B,CAAqC,UAArC,CAAiD,CAChD,SAAY,CAEX,CACCH,QAAS,aADV,CAECE,OAAQ,CACP,YAAe,GADR,CAFT,CAFW,CAUX,WAVW,CADoC,CAahD,cAAe,CACdF,QAAS,sCADK,CAEdC,WAAY,CAAA,CAFE,CAGdI,MAAO,UAHO,CAbiC,CAAjD,CA1CmI;",
"sources":["node_modules/prismjs/components/prism-less.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$prismjs$components$prism_less\"] = function(global,process,require,module,exports,shadow$shims) {\n/* FIXME :\n :extend() is not handled specifically : its highlighting is buggy.\n Mixin usage must be inside a ruleset to be highlighted.\n At-rules (e.g. import) containing interpolations are buggy.\n Detached rulesets are highlighted as at-rules.\n A comment before a mixin usage prevents the latter to be properly highlighted.\n */\n\nPrism.languages.less = Prism.languages.extend('css', {\n\t'comment': [\n\t\t/\\/\\*[\\w\\W]*?\\*\\//,\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\/.*/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'atrule': {\n\t\tpattern: /@[\\w-]+?(?:\\([^{}]+\\)|[^(){};])*?(?=\\s*\\{)/i,\n\t\tinside: {\n\t\t\t'punctuation': /[:()]/\n\t\t}\n\t},\n\t// selectors and mixins are considered the same\n\t'selector': {\n\t\tpattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\([^{}]*\\)|[^{};@])*?(?=\\s*\\{)/,\n\t\tinside: {\n\t\t\t// mixin parameters\n\t\t\t'variable': /@+[\\w-]+/\n\t\t}\n\t},\n\n\t'property': /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/i,\n\t'punctuation': /[{}();:,]/,\n\t'operator': /[+\\-*\\/]/\n});\n\n// Invert function and punctuation positions\nPrism.languages.insertBefore('less', 'punctuation', {\n\t'function': Prism.languages.less.function\n});\n\nPrism.languages.insertBefore('less', 'property', {\n\t'variable': [\n\t\t// Variable declaration (the colon must be consumed!)\n\t\t{\n\t\t\tpattern: /@[\\w-]+\\s*:/,\n\t\t\tinside: {\n\t\t\t\t\"punctuation\": /:/\n\t\t\t}\n\t\t},\n\n\t\t// Variable usage\n\t\t/@@?[\\w-]+/\n\t],\n\t'mixin-usage': {\n\t\tpattern: /([{;]\\s*)[.#](?!\\d)[\\w-]+.*?(?=[(;])/,\n\t\tlookbehind: true,\n\t\talias: 'function'\n\t}\n});\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Prism","languages","less","extend","pattern","lookbehind","inside","insertBefore","function","alias"]
}
