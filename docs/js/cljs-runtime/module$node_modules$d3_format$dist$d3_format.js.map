{
"version":3,
"file":"module$node_modules$d3_format$dist$d3_format.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/d3-format/dist/d3-format.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$d3_format$dist$d3_format\"] = function(global,process,require,module,exports,shadow$shims) {\n// https://d3js.org/d3-format/ v1.3.2 Copyright 2018 Mike Bostock\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\ntypeof define === 'function' && define.amd ? define(['exports'], factory) :\n(factory((global.d3 = global.d3 || {})));\n}(this, (function (exports) { 'use strict';\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nfunction formatDecimal(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, \u00b1Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n\nfunction exponent(x) {\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n}\n\nfunction formatGroup(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n\nfunction formatNumerals(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n\n// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nfunction formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  this.fill = match[1] || \" \";\n  this.align = match[2] || \">\";\n  this.sign = match[3] || \"-\";\n  this.symbol = match[4] || \"\";\n  this.zero = !!match[5];\n  this.width = match[6] && +match[6];\n  this.comma = !!match[7];\n  this.precision = match[8] && +match[8].slice(1);\n  this.trim = !!match[9];\n  this.type = match[10] || \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n\n// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nfunction formatTrim(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (i0 > 0) { if (!+s[i]) break out; i0 = 0; } break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n\nvar prefixExponent;\n\nfunction formatPrefixAuto(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n\nfunction formatRounded(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n\nvar formatTypes = {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": function(x) { return Math.round(x).toString(10); },\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n\nfunction identity(x) {\n  return x;\n}\n\nvar prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"\u00b5\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nfunction formatLocale(locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n      currency = locale.currency,\n      decimal = locale.decimal,\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n      percent = locale.percent || \"%\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision == null && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision == null ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Perform the initial formatting.\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero during formatting, treat as positive.\n        if (valueNegative && +value === 0) valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer \u201cvalue\u201d part that can be\n        // grouped, and fractional or exponential \u201csuffix\u201d part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n\nvar locale;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nfunction defaultLocale(definition) {\n  locale = formatLocale(definition);\n  exports.format = locale.format;\n  exports.formatPrefix = locale.formatPrefix;\n  return locale;\n}\n\nfunction precisionFixed(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n\nfunction precisionPrefix(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n\nfunction precisionRound(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n\nexports.formatDefaultLocale = defaultLocale;\nexports.formatLocale = formatLocale;\nexports.formatSpecifier = formatSpecifier;\nexports.precisionFixed = precisionFixed;\nexports.precisionPrefix = precisionPrefix;\nexports.precisionRound = precisionRound;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","factory","define","amd","d3","formatDecimal","x","p","i","indexOf","toExponential","coefficient","slice","length","exponent","Math","abs","NaN","formatGroup","grouping","thousands","value","width","t","j","g","max","push","substring","reverse","join","formatNumerals","numerals","replace","formatSpecifier","specifier","FormatSpecifier","match","re","exec","Error","fill","align","sign","symbol","zero","comma","precision","trim","type","formatRounded","d","Array","identity","formatLocale","locale","newFormat","format","valuePrefix","prefix","valueSuffix","suffix","n","c","formatType","valueNegative","s","i0","i1","prefixes","prefixExponent","maybeSuffix","charCodeAt","decimal","group","Infinity","padding","formatTypes","currency","test","toLowerCase","percent","min","toString","format.toString","formatPrefix","f","e","floor","k","pow","defaultLocale","definition","prototype","FormatSpecifier.prototype.toString","%","toFixed","b","round","toPrecision","o","formatPrefixAuto","X","toUpperCase","formatDefaultLocale","precisionFixed","step","precisionPrefix","precisionRound","Object","defineProperty"]
}
