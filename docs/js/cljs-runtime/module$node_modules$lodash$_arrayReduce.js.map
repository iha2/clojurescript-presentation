{
"version":3,
"file":"module$node_modules$lodash$_arrayReduce.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CA0BzHF,MAAAC,QAAA,CAbAE,QAAoB,CAACC,KAAD,CAAQC,QAAR,CAAkBC,WAAlB,CAA+BC,SAA/B,CAA0C,CAAA,IACxDC,MAAS,EAD+C,CAExDC,OAAkB,IAAT,EAAAL,KAAA,CAAgB,CAAhB,CAAoBA,KAAAK,OAKjC,KAHIF,SAGJ,EAHiBE,MAGjB,GAFEH,WAEF,CAFgBF,KAAA,CAAM,EAAEI,KAAR,CAEhB,EAAO,EAAEA,KAAT,CAAiBC,MAAjB,CAAA,CACEH,WAAA,CAAcD,QAAA,CAASC,WAAT,CAAsBF,KAAA,CAAMI,KAAN,CAAtB,CAAoCA,KAApC,CAA2CJ,KAA3C,CAEhB,OAAOE,YAVqD,CAb2D;",
"sources":["node_modules/lodash/_arrayReduce.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_arrayReduce\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\nmodule.exports = arrayReduce;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","arrayReduce","array","iteratee","accumulator","initAccum","index","length"]
}
