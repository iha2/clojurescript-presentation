{
"version":3,
"file":"module$node_modules$prismjs$components$prism_rust.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAQnIC,KAAAC,UAAAC,KAAA,CAAuB,CACtB,QAAW,CACV,CACCC,QAAS,2BADV,CAECC,WAAY,CAAA,CAFb,CADU,CAKV,CACCD,QAAS,kBADV,CAECC,WAAY,CAAA,CAFb,CALU,CADW,CAWtB,OAAU,CACT,uBADS,CAET,qBAFS,CAXY,CAetB,QAAW,iSAfW;AAiBtB,UAAa,CACZD,QAAS,YADG,CAEZE,MAAO,WAFK,CAjBS,CAsBtB,WAAY,CACX,sBADW,CAGX,0BAHW,CAtBU,CA2BtB,cAAe,CACdF,QAAS,cADK,CAEdE,MAAO,UAFO,CA3BO,CAiCtB,OAAU,6JAjCY,CAoCtB,iBAAkB,CACjBF,QAAS,sBADQ,CAEjBG,OAAQ,CACP,YAAe,QADR,CAEP,SAAY,MAFL,CAFS,CApCI,CA2CtB,YAAe,qBA3CO,CA4CtB,SAAY,4CA5CU,CAR4G;",
"sources":["node_modules/prismjs/components/prism-rust.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$prismjs$components$prism_rust\"] = function(global,process,require,module,exports,shadow$shims) {\n/* TODO\n\tAdd support for Markdown notation inside doc comments\n\tAdd support for nested block comments...\n\tMatch closure params even when not followed by dash or brace\n\tAdd better support for macro definition\n*/\n\nPrism.languages.rust = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\w\\W]*?\\*\\//,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'string': [\n\t\t/b?r(#*)\"(?:\\\\?.)*?\"\\1/,\n\t\t/b?(\"|')(?:\\\\?.)*?\\1/\n\t],\n\t'keyword': /\\b(?:abstract|alignof|as|be|box|break|const|continue|crate|do|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|offsetof|once|override|priv|pub|pure|ref|return|sizeof|static|self|struct|super|true|trait|type|typeof|unsafe|unsized|use|virtual|where|while|yield)\\b/,\n\n\t'attribute': {\n\t\tpattern: /#!?\\[.+?\\]/,\n\t\talias: 'attr-name'\n\t},\n\n\t'function': [\n\t\t/[a-z0-9_]+(?=\\s*\\()/i,\n\t\t// Macros can use parens or brackets\n\t\t/[a-z0-9_]+!(?=\\s*\\(|\\[)/i\n\t],\n\t'macro-rules': {\n\t\tpattern: /[a-z0-9_]+!/i,\n\t\talias: 'function'\n\t},\n\n\t// Hex, oct, bin, dec numbers with visual separators and type suffix\n\t'number': /\\b-?(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\\d(_?\\d)*)?\\.?\\d(_?\\d)*([Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\\b/,\n\n\t// Closure params should not be confused with bitwise OR |\n\t'closure-params': {\n\t\tpattern: /\\|[^|]*\\|(?=\\s*[{-])/,\n\t\tinside: {\n\t\t\t'punctuation': /[\\|:,]/,\n\t\t\t'operator': /[&*]/\n\t\t}\n\t},\n\t'punctuation': /[{}[\\];(),:]|\\.+|->/,\n\t'operator': /[-+*\\/%!^=]=?|@|&[&=]?|\\|[|=]?|<<?=?|>>?=?/\n};\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Prism","languages","rust","pattern","lookbehind","alias","inside"]
}
