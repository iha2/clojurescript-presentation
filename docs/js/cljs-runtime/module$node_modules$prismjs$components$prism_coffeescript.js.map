{
"version":3,
"file":"module$node_modules$prismjs$components$prism_coffeescript.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CA2FzIC,MAAAA,CAAAA,KAvFEC,QAAAA,CAAU,WACVC,QAAAA,CAAgB,CACfC,QAAS,YADM,CAEfC,MAAO,UAFQ,CAKpBJ,OAAAK,UAAAC,aAAA,CAA+BN,MAAAK,UAAAE,OAAA,CAAuB,YAAvB,CAAqC,CACnE,QAAWN,OADwD,CAEnE,OAAU,CAGT,CACCE,QAAS,kBADV,CAECK,OAAQ,CAAA,CAFT,CAHS,CAQT,CAECL,QAAS,kBAFV,CAGCK,OAAQ,CAAA,CAHT,CAICC,OAAQ,CACP,cAAiBP,OADV,CAJT,CARS,CAFyD,CAmBnE,QAAW,gSAnBwD;AAoBnE,eAAgB,CACfC,QAAS,YADM,CAEfC,MAAO,UAFQ,CApBmD,CAArC,CA0B/BJ,OAAAK,UAAAK,aAAA,CAA6B,cAA7B,CAA6C,SAA7C,CAAwD,CACvD,oBAAqB,CACpBP,QAAS,gBADW,CAEpBC,MAAO,SAFa,CADkC,CAOvD,cAAe,CACdD,QAAS,oBADK,CAEdC,MAAO,OAFO,CAGdK,OAAQ,CACP,QAAWR,OADJ,CAEP,cAAiBC,OAFV,CAHM,CAPwC,CAAxD,CAiBAF,OAAAK,UAAAK,aAAA,CAA6B,cAA7B,CAA6C,QAA7C,CAAuD,CACtD,oBAAqB,CACpBP,QAAS,mBADW,CAEpBM,OAAQ,CACP,UAAa,CACZN,QAAS,OADG,CAEZC,MAAO,aAFK,CADN,CAKPO,KAAMX,MAAAK,UAAAO,WALC,CAFY,CADiC,CAatD,mBAAoB,CACnB,CACCT,QAAS,gBADV;AAECK,OAAQ,CAAA,CAFT,CAGCJ,MAAO,QAHR,CADmB,CAMnB,CACCD,QAAS,gBADV,CAECK,OAAQ,CAAA,CAFT,CAGCJ,MAAO,QAHR,CAICK,OAAQ,CACPP,cAAeA,OADR,CAJT,CANmB,CAbkC,CAAvD,CA+BAF,OAAAK,UAAAK,aAAA,CAA6B,cAA7B,CAA6C,SAA7C,CAAwD,CAEvD,SAAY,wBAF2C,CAAxD,CAKA,QAAOV,MAAAK,UAAAC,aAAA,CAA6B,iBAA7B,CAzFoI;",
"sources":["node_modules/prismjs/components/prism-coffeescript.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$prismjs$components$prism_coffeescript\"] = function(global,process,require,module,exports,shadow$shims) {\n(function(Prism) {\n\n// Ignore comments starting with { to privilege string interpolation highlighting\nvar comment = /#(?!\\{).+/,\n    interpolation = {\n    \tpattern: /#\\{[^}]+\\}/,\n    \talias: 'variable'\n    };\n\nPrism.languages.coffeescript = Prism.languages.extend('javascript', {\n\t'comment': comment,\n\t'string': [\n\n\t\t// Strings are multiline\n\t\t{\n\t\t\tpattern: /'(?:\\\\?[^\\\\])*?'/,\n\t\t\tgreedy: true,\n\t\t},\n\n\t\t{\n\t\t\t// Strings are multiline\n\t\t\tpattern: /\"(?:\\\\?[^\\\\])*?\"/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t}\n\t],\n\t'keyword': /\\b(and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\\b/,\n\t'class-member': {\n\t\tpattern: /@(?!\\d)\\w+/,\n\t\talias: 'variable'\n\t}\n});\n\nPrism.languages.insertBefore('coffeescript', 'comment', {\n\t'multiline-comment': {\n\t\tpattern: /###[\\s\\S]+?###/,\n\t\talias: 'comment'\n\t},\n\n\t// Block regexp can contain comments and interpolation\n\t'block-regex': {\n\t\tpattern: /\\/{3}[\\s\\S]*?\\/{3}/,\n\t\talias: 'regex',\n\t\tinside: {\n\t\t\t'comment': comment,\n\t\t\t'interpolation': interpolation\n\t\t}\n\t}\n});\n\nPrism.languages.insertBefore('coffeescript', 'string', {\n\t'inline-javascript': {\n\t\tpattern: /`(?:\\\\?[\\s\\S])*?`/,\n\t\tinside: {\n\t\t\t'delimiter': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'punctuation'\n\t\t\t},\n\t\t\trest: Prism.languages.javascript\n\t\t}\n\t},\n\n\t// Block strings\n\t'multiline-string': [\n\t\t{\n\t\t\tpattern: /'''[\\s\\S]*?'''/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t{\n\t\t\tpattern: /\"\"\"[\\s\\S]*?\"\"\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\tinterpolation: interpolation\n\t\t\t}\n\t\t}\n\t]\n\n});\n\nPrism.languages.insertBefore('coffeescript', 'keyword', {\n\t// Object property\n\t'property': /(?!\\d)\\w+(?=\\s*:(?!:))/\n});\n\ndelete Prism.languages.coffeescript['template-string'];\n\n}(Prism));\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Prism","comment","interpolation","pattern","alias","languages","coffeescript","extend","greedy","inside","insertBefore","rest","javascript"]
}
